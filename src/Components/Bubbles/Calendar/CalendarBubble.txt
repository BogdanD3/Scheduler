import { useState } from "react";
import clsx from "clsx";

const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
const workers = ["Alice", "Bob", "Charlie", "Diana", "Eve"];
const shifts = ["Morning", "Afternoon", "Night", "Off"];

// Helper to get a week start date and generate date strings, not core for monthly calendar logic here but can be expanded later.

function MonthlyBubble() {
  // State for preferences (shift choices for 4 workers only), schedule, and selected week (max 4 weeks shown)
  const [preferences, setPreferences] = useState<{ [name: string]: string }>({});
  const [schedule, setSchedule] = useState<any>(null);
  const [selectedWeekIndex, setSelectedWeekIndex] = useState(0);

  // Show 4 weeks, for demo just label them Week 1 ... Week 4
  const weeks = ["Week 1", "Week 2", "Week 3", "Week 4"];

  // Helper to count how many people assigned to a shift on a given day for validation
  function countShiftWorkers(sched: any, dayIndex: number, shift: string) {
    let count = 0;
    for (let w of workers) {
      if (sched[w] && sched[w][dayIndex] === shift) count++;
    }
    return count;
  }

  // Generate schedule with constraints described
 const generateSchedule = () => {
  const result: any = {};
  const offDaysSet = new Set<number>();

  const eve = "Eve";
  const otherWorkers = workers.filter(w => w !== eve);

  // Choose 2 consecutive days off for Eve
  const eveOffStart = Math.floor(Math.random() * 6); // ensures eveOffStart+1 is valid
  const eveOffDays = [eveOffStart, eveOffStart + 1];

  // Eve's schedule: night unless off
  result[eve] = Array(7)
    .fill("Night")
    .map((_, i) => (eveOffDays.includes(i) ? "Off" : "Night"));

  // Track shift counts
  const shiftCountsPerDay: {
    [day: number]: { Morning: number; Afternoon: number; Night: number };
  } = {};
  for (let i = 0; i < 7; i++) {
    shiftCountsPerDay[i] = { Morning: 0, Afternoon: 0, Night: 0 };
    if (!eveOffDays.includes(i)) shiftCountsPerDay[i]["Night"]++; // Eve fills these
  }

  // Pick night fill-in (cannot be Eve)
  const nightFillIn = otherWorkers[Math.floor(Math.random() * otherWorkers.length)];
  const dayWorkers = otherWorkers.filter(w => w !== nightFillIn);

  // Assign night shifts to fill-in on Eveâ€™s off days
// Assign night shifts to fill-in on Eveâ€™s off days
result[nightFillIn] = Array(7).fill(null);

// Night shifts on Eveâ€™s off days
for (let day of eveOffDays) {
  result[nightFillIn][day] = "Night";
  shiftCountsPerDay[day]["Night"]++;
}

// Calculate 2 consecutive off days after the night shifts
const fillInOffDay1 = (eveOffDays[1] + 1) % 7;
const fillInOffDay2 = (fillInOffDay1 + 1) % 7;

result[nightFillIn][fillInOffDay1] = "Off";
result[nightFillIn][fillInOffDay2] = "Off";
shiftCountsPerDay[fillInOffDay1] ??= { Morning: 0, Afternoon: 0, Night: 0 };
shiftCountsPerDay[fillInOffDay2] ??= { Morning: 0, Afternoon: 0, Night: 0 };

// Assign remaining shifts for fill-in
for (let i = 0; i < 7; i++) {
  if (result[nightFillIn][i]) continue;

  const shift = shiftCountsPerDay[i]["Morning"] < 2 ? "Morning" :
                shiftCountsPerDay[i]["Afternoon"] < 2 ? "Afternoon" : "Off";

  result[nightFillIn][i] = shift;
  if (shift !== "Off") shiftCountsPerDay[i][shift]++;
}

  // Assign remaining shifts for fill-in
  for (let i = 0; i < 7; i++) {
    if (result[nightFillIn][i]) continue;

    const shift = shiftCountsPerDay[i]["Morning"] < 2 ? "Morning" :
                  shiftCountsPerDay[i]["Afternoon"] < 2 ? "Afternoon" : "Off";

    result[nightFillIn][i] = shift;
    if (shift !== "Off") shiftCountsPerDay[i][shift]++;
  }

  // Now assign the remaining workers
  for (const worker of dayWorkers) {
    result[worker] = Array(7).fill(null);

    // Pick one free day not already taken
    let freeDay = -1;
    for (let tries = 0; tries < 20; tries++) {
      const d = Math.floor(Math.random() * 7);
      if (!offDaysSet.has(d) && !eveOffDays.includes(d) && result[nightFillIn][d] !== "Off") {
        freeDay = d;
        offDaysSet.add(d);
        break;
      }
    }

    if (freeDay === -1) {
      for (let d = 0; d < 7; d++) {
        if (!offDaysSet.has(d)) {
          freeDay = d;
          offDaysSet.add(d);
          break;
        }
      }
    }

    for (let i = 0; i < 7; i++) {
      if (i === freeDay) {
        result[worker][i] = "Off";
        continue;
      }

      const shift = shiftCountsPerDay[i]["Morning"] < 2 ? "Morning" :
                    shiftCountsPerDay[i]["Afternoon"] < 2 ? "Afternoon" : "Off";

      result[worker][i] = shift;
      if (shift !== "Off") shiftCountsPerDay[i][shift]++;
    }
  }

  setSchedule(result);
};


  // Reset state handlers
  const regenerate = () => {
    setSchedule(null);
    setPreferences({});
  };

  // Save handler placeholder for future DB save logic
  const saveSchedule = () => {
    alert("Schedule saved! (Functionality to be implemented)");
  };

  const handlePreferenceChange = (worker: string, shift: string) => {
    setPreferences((prev) => ({ ...prev, [worker]: shift }));
  };

  return (
    <div className="text-white p-4">
      <h2 className="text-2xl mb-4">ðŸ“… Monthly Schedule (4 weeks)</h2>

      {/* Week selector */}
      <div className="mb-4 flex gap-4">
        {weeks.map((w, i) => (
          <button
            key={w}
            className={clsx(
              "px-4 py-2 rounded",
              selectedWeekIndex === i ? "bg-blue-600" : "bg-white/10"
            )}
            onClick={() => {
              setSelectedWeekIndex(i);
              setSchedule(null);
              setPreferences({});
            }}
          >
            {w}
          </button>
        ))}
      </div>

      {/* Shift preferences for 4 workers only */}
      {!schedule && (
        <>
          <p className="mb-2">Set preferred shifts for each worker (except Eve - night shift):</p>
          {workers.slice(0, 4).map((worker) => (
            <div key={worker} className="mb-2 flex items-center gap-2">
              <label className="w-20">{worker}:</label>
              <select
                value={preferences[worker] || ""}
                onChange={(e) => handlePreferenceChange(worker, e.target.value)}
                className="bg-white/10 p-2 rounded text-black"
              >
                <option value="">Select shift</option>
                <option value="Morning">Morning</option>
                <option value="Afternoon">Afternoon</option>
                <option value="Off">Off</option>
                {/* Eve is night shift, not selectable here */}
              </select>
            </div>
          ))}

          <button
            onClick={generateSchedule}
            className="mt-4 bg-yellow-500 px-4 py-2 rounded hover:bg-yellow-600"
          >
            Generate Schedule
          </button>
        </>
      )}

      {/* Schedule Table */}
      {schedule && (
        <>
          <div className="overflow-x-auto mt-6">
            <table className="w-full border border-white/20">
              <thead>
                <tr>
                  <th className="p-2 border border-white/20">Worker</th>
                  {days.map((day) => (
                    <th key={day} className="p-2 border border-white/20">
                      {day}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {workers.map((worker) => (
                  <tr key={worker}>
                    <td className="p-2 border border-white/20 font-semibold">{worker}</td>
                    {schedule[worker].map((shift: string, idx: number) => (
                      <td
                        key={`${worker}-${idx}`}
                        className={clsx(
                          "p-2 border border-white/20",
                          shift === "Off" && "text-gray-400 italic",
                          shift === "Night" && "text-purple-400",
                          shift === "Morning" && "text-green-300",
                          shift === "Afternoon" && "text-yellow-300"
                        )}
                      >
                        {shift}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="mt-6 flex gap-4">
            <button
              onClick={regenerate}
              className="bg-yellow-500 px-4 py-2 rounded hover:bg-yellow-600"
            >
              ðŸ”„ Regenerate
            </button>
            <button
              onClick={saveSchedule}
              className="bg-green-500 px-4 py-2 rounded hover:bg-green-600"
            >
              âœ… Save
            </button>
          </div>
        </>
      )}
    </div>
  );
}

export default MonthlyBubble;
  
Just in case ..